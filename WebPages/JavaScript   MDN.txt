https://developer.mozilla.org/en-US/docs/Web/JavaScript
JavaScript | MDN Skip to main content Skip to select language Open main menu ReferencesReferences Overview / Web Technology Web technology reference for developers HTML Structure of content on the web CSS Code used to describe document style JavaScript General-purpose scripting language HTTP Protocol for transmitting web resources Web APIs Interfaces for building web applications Web Technology Web technology reference for developers GuidesGuides Overview / MDN Learning Area Learn web development MDN Learning Area Learn web development HTML Learn to structure web content with HTML CSS Learn to style content using CSS JavaScript Learn to run scripts in the browser Accessibility Learn to make the web accessible to all MDN PlusMDN Plus Overview More MDN. Your MDN. FAQ Frequently asked questions about MDN Plus Search MDNClear search inputSearch Theme References JavaScript Article Actions English (US) In this article Tutorials Reference Tools & resources Related Topics JavaScript Tutorials: Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Details of the object model Using promises Iterators and generators Meta programming JavaScript modules Intermediate Client-side JavaScript frameworks Client-side web APIs A re-introduction to JavaScript JavaScript data structures Equality comparisons and sameness Closures Advanced Inheritance and the prototype chain Strict mode JavaScript typed arrays Memory Management Concurrency model and Event Loop References: Built-in objects AggregateError Array ArrayBuffer AsyncFunction Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() encodeURI() encodeURIComponent() Error escape() eval() EvalError FinalizationRegistry Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int16Array Int32Array Int8Array InternalError Intl isFinite() isNaN() JSON Map Math NaN null Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String Symbol SyntaxError TypedArray TypeError Uint16Array Uint32Array Uint8Array Uint8ClampedArray undefined unescape() uneval() URIError WeakMap WeakRef WeakSet WebAssembly Expressions & operators Addition assignment (+=) Addition (+) Assignment (=) async function expression await Bitwise AND assignment (&=) Bitwise AND (&) Bitwise NOT (~) Bitwise OR assignment (|=) Bitwise OR (|) Bitwise XOR assignment (^=) Bitwise XOR (^) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete operator Destructuring assignment Division assignment (/=) Division (/) Equality (==) Exponentiation assignment (**=) Exponentiation (**) function* expression Function expression Greater than or equal (>=) Greater than (>) Grouping operator ( ) in operator Increment (++) Inequality (!=) instanceof Left shift assignment (<<=) Left shift (<<) Less than or equal (<=) Less than (<) Logical AND assignment (&&=) Logical AND (&&) Logical NOT (!) Logical nullish assignment (??=) Logical OR assignment (||=) Logical OR (||) Multiplication assignment (*=) Multiplication (*) new.target new operator Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder assignment (%=) Remainder (%) Right shift assignment (>>=) Right shift (>>) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction assignment (-=) Subtraction (-) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift assignment (>>>=) Unsigned right shift (>>>) void operator yield* yield Statements & declarations async function block break class const continue debugger do...while empty export for await...of for...in for...of for function* function declaration if...else import.meta import label let return switch throw try...catch var while with Functions The arguments object Arrow function expressions Default parameters getter Method definitions Rest parameters setter Classes Class static initialization blocks constructor extends Private class features Public class fields static Errors Warning: -file- is being assigned a //# sourceMappingURL, but already has one TypeError: invalid Array.prototype.sort argument Warning: 08/09 is not a legal ECMA-262 octal constant RangeError: radix must be an integer SyntaxError: invalid regular expression flag "x" SyntaxError: return not in function TypeError: X.prototype.y called on incompatible type ReferenceError: can't access lexical declaration`X' before initialization TypeError: can't access property "x" of "y" TypeError: can't assign to property "x" on "y": not an object TypeError: can't define property "x": "obj" is not extensible TypeError: property "x" is non-configurable and can't be deleted TypeError: can't redefine non-configurable property "x" TypeError: cyclic object value TypeError: can't access dead object SyntaxError: applying the 'delete' operator to an unqualified name is deprecated ReferenceError: deprecated caller or arguments usage Warning: expression closures are deprecated SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead Warning: String.x is deprecated; use String.prototype.x instead Warning: Date.prototype.toLocaleFormat is deprecated SyntaxError: test for equality (==) mistyped as assignment (=)? TypeError: setting getter-only property "x" SyntaxError: Unexpected '#' used outside of class body SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character TypeError: cannot use 'in' operator to search for 'x' in 'y' RangeError: invalid array length ReferenceError: invalid assignment left-hand side TypeError: invalid assignment to const "x" RangeError: invalid date SyntaxError: for-in loop head declarations may not have initializers SyntaxError: a declaration in the head of a for-of loop can't have an initializer TypeError: invalid 'instanceof' operand 'x' TypeError: 'x' is not iterable SyntaxError: JSON.parse: bad parsing SyntaxError: Malformed formal parameter URIError: malformed URI sequence SyntaxError: missing ] after element list SyntaxError: missing : after property id SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing formal parameter SyntaxError: missing = in const declaration SyntaxError: missing name after . operator SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ; before statement TypeError: More arguments needed RangeError: repeat count must be non-negative TypeError: "x" is not a non-null object TypeError: "x" has no properties SyntaxError: missing variable name TypeError: can't delete non-configurable array element RangeError: argument is not a valid code point TypeError: "x" is not a constructor TypeError: "x" is not a function ReferenceError: "x" is not defined RangeError: precision is out of range Error: Permission denied to access property "x" TypeError: "x" is read-only SyntaxError: redeclaration of formal parameter "x" TypeError: Reduce of empty array with no initial value SyntaxError: "x" is a reserved identifier RangeError: repeat count must be less than infinity Warning: unreachable code after return statement SyntaxError: "use strict" not allowed in function with non-simple parameters InternalError: too much recursion ReferenceError: assignment to undeclared variable "x" ReferenceError: reference to undefined property "x" SyntaxError: Unexpected token TypeError: "x" is (not) "y" SyntaxError: function statement requires a name SyntaxError: unterminated string literal Misc JavaScript technologies overview Lexical grammar JavaScript data structures Enumerability and ownership of properties Iteration protocols Strict mode Transitioning to strict mode Template literals Deprecated features In this article Tutorials Reference Tools & resources JavaScript JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles. Read more about JavaScript. This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about API specifics to Web pages, please see Web APIs and DOM. The standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). The JavaScript documentation throughout MDN is based on the latest draft versions of ECMA-262 and ECMA-402. And in cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Do not confuse JavaScript with the Java programming language. Both "Java" and "JavaScript" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use. Looking to become a front-end web developer? We have put together a course that includes all the essential information you need to work towards your goal. Get started Tutorials Learn how to program in JavaScript with guides and tutorials. For complete beginners Head over to our Learning Area JavaScript topic if you want to learn JavaScript but have no previous experience with JavaScript or programming. The complete modules available there are as follows: JavaScript first steps Answers some fundamental questions such as "what is JavaScript?", "what does it look like?", and "what can it do?", along with discussing key JavaScript features such as variables, strings, numbers, and arrays. JavaScript building blocks Continues our coverage of JavaScript's key fundamental features, turning our attention to commonly-encountered types of code blocks such as conditional statements, loops, functions, and events. Introducing JavaScript objects The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you. Asynchronous JavaScript Discusses asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations such as fetching resources from a server. Client-side web APIs Explores what APIs are, and how to use some of the most common APIs you'll come across often in your development work. JavaScript guide JavaScript Guide A much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language. Intermediate Understanding client-side JavaScript frameworks JavaScript frameworks are an essential part of modern front-end web development, providing developers with proven tools for building scalable, interactive web applications. This module gives you some fundamental background knowledge about how client-side frameworks work and how they fit into your toolset, before moving on to tutorial series covering some of today's most popular ones. A re-introduction to JavaScript An overview for those who think they know about JavaScript. JavaScript data structures Overview of available data structures in JavaScript. Equality comparisons and sameness JavaScript provides three different value-comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method. Closures A closure is the combination of a function and the lexical environment within which that function was declared. Advanced Inheritance and the prototype chain Explanation of the widely misunderstood and under-estimated prototype-based inheritance. Strict mode Strict mode defines that you can not use any variable before initializing it. It is a restricted variant of ECMAScript 5, for faster performance and easier debugging. JavaScript typed arrays JavaScript typed arrays provide a mechanism for accessing raw binary data. Memory Management Memory life cycle and garbage collection in JavaScript. Concurrency model and Event Loop JavaScript has a concurrency model based on an "event loop". Reference Browse the complete JavaScript reference documentation. Standard objects Get to know standard built-in objects Array, Boolean, Date, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others. Expressions and operators Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more. Statements and declarations Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work. Functions Learn how to work with JavaScript's functions to develop your applications. Tools & resources Helpful tools for writing and debugging your JavaScript code. Firefox Developer Tools Web Console, JavaScript Profiler, Debugger, and more. JavaScript Shells A JavaScript shell allows you to quickly test snippets of JavaScript code. Learn JavaScript An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment. TogetherJS Collaboration made easy. By adding TogetherJS to your site, your users can help each other out on a website in real-time! Stack Overflow Stack Overflow questions tagged with "JavaScript". JSFiddle Edit JavaScript, CSS, HTML and get live results. Use external resources and collaborate with your team online. Plunker Plunker is an online community for creating, collaborating on and sharing your web development ideas. Edit your JavaScript, CSS, HTML files and get live results and file structure. JSBin JS Bin is an open-source collaborative web development debugging tool. Codepen Codepen is another collaborative web development tool used as a live result playground. StackBlitz StackBlitz is another online playground/debugging tool, which can host and deploy full-stack applications using React, Angular, etc. RunJS RunJS is a desktop playground/scratchpad tool, which provides live results and access to both Node and Browser APIs. Found a problem with this page? Edit on GitHub Source on GitHub Report a problem with this content on GitHub Want to fix the problem yourself? See our Contribution guide. Last modified: Jul 28, 2021, by MDN contributors Your blueprint for a better internet. MDN on Twitter MDN on Github MDN About Hacks Blog Careers Support Product help Report a page issue Report a site issue Our communities MDN Community MDN Forum MDN Chat Developers Web Technologies Learn Web Development MDN Plus Website Privacy Notice Cookies Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation. Portions of this content are ©1998–2022 by individual mozilla.org contributors. Content available under a Creative Commons license.
